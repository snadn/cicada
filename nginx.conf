user  nginx;
worker_processes  1;

error_log  /dev/stderr warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    charset UTF-8;

    server_tokens off;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_cookie"';

    access_log  /dev/stdout  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip               on;
    gzip_vary          on;

    gzip_comp_level    6;
    gzip_buffers       16 8k;

    gzip_min_length    1000;
    gzip_proxied       any;
    gzip_disable       "msie6";

    gzip_http_version  1.0;

    gzip_types         text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;


    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      '';
    }
    map $http_x_request_id $req_id {
        default   $http_x_request_id;
        ''        $request_id;
    }

    proxy_http_version 1.1;
    proxy_set_header X-Request-ID $req_id;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $http_host;
    # proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_redirect off;

    client_max_body_size 0;

    upstream http_backend {
        server 127.0.0.1:8360;

        keepalive 256;
    }

    server {
      listen 80;
      listen [::]:80 ipv6only=on;
      root /app/www;

      if ($uri ~* "\.map$") {
        return 404;
      }

      rewrite ^/([\w-]+[/_-])?(public|static)/(.*) /static/$3;

      location / {
        try_files $uri $uri.html $uri/index.html @node;
      }

      location @node {
        proxy_pass http://http_backend$request_uri;
      }

      location = /index.js {
        rewrite (.*) @node;
      }

      location = /development.js {
        deny all;
      }

      location = /testing.js {
        deny all;
      }

      location = /production.js {
        deny all;
      }

      location ^~ /static/ {
        try_files $uri $uri.html $uri/ =404;
        etag     on;
        expires    max;
      }
    }
}
